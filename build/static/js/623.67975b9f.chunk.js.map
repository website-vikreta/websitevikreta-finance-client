{"version":3,"file":"static/js/623.67975b9f.chunk.js","mappings":"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","sources":["components/PopupModals/PopupInvestDocs.js"],"sourcesContent":["// PopupImage.js\r\nimport React from 'react';\r\nimport { Box, Button, CircularProgress, Container, Dialog, DialogContent, DialogTitle, Typography } from '@mui/material';\r\nimport DownloadIcon from '@mui/icons-material/Download';\r\nimport CloseIcon from '@mui/icons-material/Close';\r\nimport JSZip from 'jszip';\r\nimport { saveAs } from 'file-saver';\r\n\r\n\r\n\r\nexport default function PopupImage(props) {\r\n    const { showDocsModal, setShowDocsModal } = props;\r\n    const { openImgDialog, id, documents, loading } = showDocsModal;\r\n\r\n    const handleClose = () => {\r\n        setShowDocsModal({ ...showDocsModal, openImgDialog: false });\r\n    };\r\n\r\n    const detectFileType = (base64String) => {\r\n        if (base64String.startsWith('data:image/jpeg;base64,')) {\r\n            return 'image';\r\n        } else if (base64String.startsWith('data:image/png;base64,')) {\r\n            return 'image';\r\n        } else if (base64String.startsWith('data:image/gif;base64,')) {\r\n            return 'image';\r\n        } else if (base64String.startsWith('data:application/pdf;base64,')) {\r\n            return 'pdf';\r\n        } else {\r\n            return 'unknown'; // Handle other file types if needed\r\n        }\r\n    };\r\n\r\n\r\n    function downloadInvestmentDocuments(documentsArray) {\r\n        const zip = new JSZip();\r\n\r\n        \r\n        // Loop through the documents array\r\n        documentsArray.forEach((documentData, index) => {\r\n            \r\n            var fileType = detectFileType(documentData);\r\n\r\n            const base64Data = documentData.split(',')[1]; // Replace with the actual base64 data            \r\n\r\n            const fileName = `Investment_${index + 1}.${fileType === 'pdf' ? fileType : 'jpg'}`;\r\n            // Add the file to the zip\r\n            zip.file(fileName, base64Data, { base64: true });\r\n        });\r\n\r\n        // Generate the zip content\r\n        zip.generateAsync({ type: 'blob' }).then((content) => {\r\n            // Save the zip as a file\r\n            saveAs(content, `Investment_Documents_${id}.zip`);\r\n        });\r\n    }\r\n    return (\r\n        <Dialog open={openImgDialog} onClose={handleClose} maxWidth=\"md\">\r\n            <DialogTitle>\r\n                <div style={{ display: 'flex' }}>\r\n                    <Typography variant=\"h6\" component=\"div\" style={{ flexGrow: 1, paddingLeft: 22 }}>\r\n                        Investment Documents\r\n                    </Typography>\r\n                    <Button color=\"secondary\" onClick={() => setShowDocsModal({ ...showDocsModal, openImgDialog: false })}>\r\n                        <CloseIcon />\r\n                    </Button>\r\n                </div>\r\n            </DialogTitle>\r\n            <DialogContent dividers sx={{ paddingY: 5 }}>\r\n                {\r\n                    loading ? <><Container><Box>Loading...<CircularProgress /></Box></Container></> :\r\n                        <>\r\n\r\n                            {documents[0] ?\r\n                                <Container >\r\n\r\n                                    {documents.map((document, index) => (\r\n                                        <div key={index}>\r\n                                            {detectFileType(document) === 'image' ? (\r\n                                                <img src={document} alt=\"View after sometime or Download to view\" style={{ width: '100%', flex: 1, paddingTop: 30 }} />\r\n                                            ) : (\r\n                                                <iframe width=\"500\" height=\"500\" title={id} src={document}></iframe>\r\n                                            )}\r\n                                        </div>\r\n\r\n                                    ))}\r\n                                    <Box><Button className=\"btn btn-primary mt-3\" onClick={() => downloadInvestmentDocuments(documents)}>Download<DownloadIcon /></Button></Box>\r\n\r\n\r\n                                </Container> :\r\n                                <Typography>Please Upload Investment Documents</Typography>\r\n                            }\r\n                        </>\r\n                }\r\n            </DialogContent>\r\n        </Dialog>\r\n    );\r\n}\r\n"],"names":["PopupImage","props","showDocsModal","setShowDocsModal","openImgDialog","id","documents","loading","detectFileType","base64String","startsWith","_jsxs","Dialog","open","onClose","_objectSpread","maxWidth","children","_jsx","DialogTitle","style","display","Typography","variant","component","flexGrow","paddingLeft","Button","color","onClick","CloseIcon","DialogContent","dividers","sx","paddingY","_Fragment","Container","Box","CircularProgress","map","document","index","src","alt","width","flex","paddingTop","height","title","className","documentsArray","zip","JSZip","forEach","documentData","fileType","base64Data","split","fileName","concat","file","base64","generateAsync","type","then","content","saveAs","downloadInvestmentDocuments","DownloadIcon"],"sourceRoot":""}