{"version":3,"file":"static/js/968.16e1d6ec.chunk.js","mappings":"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","sources":["components/Items/ItemForm.js","components/investments/InvestmentForm.js","components/investments/EditInvestment.js","components/PopupModals/Popup.js"],"sourcesContent":["import { useRef, useState } from \"react\";\nimport FileBase64 from 'react-file-base64';\n\nimport { toast } from 'react-toastify';\nimport Cookie from 'universal-cookie';\nimport 'react-toastify/dist/ReactToastify.css';\n\nimport { TextField, Container, FormHelperText, FormControlLabel, FormLabel, RadioGroup, Radio } from '@mui/material';\nimport { DatePicker } from '@mui/x-date-pickers/DatePicker';\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\nimport { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';\nimport styled from \"@emotion/styled\";\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { createItem } from '../../api/index';\nimport '../../styles/itemform.css';\n// import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nconst Date = styled(DatePicker)`\n    width: 300px\n`;\n\nconst ItemForm = (props) => {\n\n   let user = JSON.parse(localStorage.getItem('user-info'));\n\n   const [itemData, setItemData] = useState({ title: '', amount: '', category: '', paymentType: '', dateOfInvoice: null, dateOfPayment: null, description: '', paymentProof: '', userId: user.id });\n   const { title, amount, category, paymentType, dateOfInvoice, dateOfPayment, description, paymentProof, userId } = itemData;\n\n   const { setRender, showModal, setShowModal } = props;\n\n   const loadingRef = useRef(false);\n\n   var cookie = new Cookie();\n   cookie.set('user', userId, { path: '/' })\n   const [errors, setErrors] = useState({\n      title: {\n         value: title,\n         error: false,\n         errorMessage: ''\n      },\n      amount: {\n         value: amount,\n         error: false,\n         errorMessage: ''\n      },\n      category: {\n         value: category,\n         error: false,\n         errorMessage: ''\n      },\n      paymentType: {\n         value: paymentType,\n         error: false,\n         errorMessage: ''\n      },\n      dateOfInvoice: {\n         value: dateOfInvoice,\n         error: false,\n         errorMessage: ''\n      },\n      dateOfPayment: {\n         value: dateOfPayment,\n         error: false,\n         errorMessage: ''\n      }\n   })\n\n   function validateItemDetails() {\n\n      loadingRef.current = true;\n\n      const errorFields = Object.keys(errors);\n      let newErrorValues = { ...errors }\n      let values = Object.values(itemData)\n      let countErrors = 0;\n      for (let index = 0; index < errorFields.length; index++) {\n         const currentField = errorFields[index];\n         const currentValue = values[index];\n         \n         if (currentValue === '' || ((currentField === 'dateOfInvoice'|| currentField === 'dateOfPayment') && currentValue === null)) {\n            countErrors = countErrors + 1;\n            newErrorValues = {\n               ...newErrorValues,\n               [currentField]: {\n                  ...newErrorValues[currentField],\n                  error: true,\n                  errorMessage: 'This field is required'\n               }\n            }\n         }\n      }\n      \n\n      setErrors(newErrorValues);\n      if (countErrors !== 0) loadingRef.current = false;\n      if (countErrors === 0) addItemDetails();\n      setTimeout(() => {\n         loadingRef.current = false;\n\n      }, 2000);\n\n   }\n   const addItemDetails = async () => {\n\n      await createItem(itemData);\n      setShowModal({ ...showModal, openDialog: false });\n      setRender('addSet');\n\n      toast.success(\"Item Added Successfully!!\", {\n         position: \"top-center\",\n         autoClose: 2000,\n         hideProgressBar: false,\n         closeOnClick: true,\n         theme: \"light\",\n      });\n   }\n\n   const clear = () => {\n      setItemData({ title: '', amount: '', category: '', paymentType: '', dateOfInvoice: null, dateOfPayment: null, description: '', paymentProof: '' });\n   }\n\n   const onValueChange = (e) => {\n\n      setErrors({\n         ...errors,\n         [e.target.name]: {\n            ...errors[e.target.name],\n            error: false,\n            errorMessage: ''\n         }\n      })\n      setItemData({ ...itemData, [e.target.name]: e.target.value })\n   }\n   const setDateOfInvoice = (date) => {\n      setItemData({ ...itemData, dateOfInvoice: date })\n      setErrors({...errors, dateOfInvoice: {...errors[dateOfInvoice], error: false, errorMessage: ''}})\n   }\n   const setDateOfPayment = (date) => {\n      setItemData({ ...itemData, dateOfPayment: date })\n      setErrors({...errors, dateOfPayment: {...errors[dateOfPayment], error: false, errorMessage: ''}})\n   }\n\n   const handleImageData = (img) => {\n\n      setItemData({ ...itemData, paymentProof: img });\n      const validExtensions = ['png', 'jpeg', 'jpg', 'pdf'];\n      const fileExtension = img.split(';')[0].split('/')[1]\n      if (!validExtensions.includes(fileExtension)) {\n         alert('File must be in img and pdf format');\n      }\n      const newRes = (img.length * (3 / 4)) - 2;\n      const size = (newRes / (1024 * 1024)); //1048576;2,560,181\n\n      if (size > 1.5) {\n         alert('File limit exceed');\n      }\n      console.log(paymentProof);\n\n   }\n\n   return (\n\n      <Container>\n         <div className=\"item-form\">\n            <div >\n               <FormLabel className=\"label\" id=\"demo-controlled-radio-buttons-group\">Item Title <span className=\"text-danger\">*</span></FormLabel>\n\n               <TextField variant='outlined' fullWidth\n                  type={'text'} onChange={(e) => onValueChange(e)}\n                  error={(errors.title.error)}\n                  helperText={(errors.title.error && errors.title.errorMessage)}\n                  name='title' value={title}\n                  size=\"small\"\n               ></TextField>\n            </div>\n            <div >\n               <FormLabel className=\"label\" id=\"demo-controlled-radio-buttons-group\">Amount <span className=\"text-danger\">*</span></FormLabel>\n\n               <TextField type={'text'} onChange={(e) => onValueChange(e)}\n                  name='amount' fullWidth\n                  error={(errors.amount.error) || (amount !== '' && !amount.match(/^\\d+$/))}\n                  helperText={(errors.amount.error && errors.amount.errorMessage) || (!amount.match(/^\\d+$/) && amount !== '' ? 'Only digits are allowed' : '')}\n                  value={amount}\n                  size=\"small\"\n               ></TextField>\n            </div>\n\n            <div>\n               <FormLabel className=\"label\" id=\"demo-controlled-radio-buttons-group\">Category <span className=\"text-danger\">*</span></FormLabel>\n\n               <TextField fullWidth\n                  type={'text'} onChange={(e) => onValueChange(e)}\n                  name='category'\n                  error={(errors.category.error)}\n                  helperText={(errors.category.error && errors.category.errorMessage)}\n                  value={category}\n                  size=\"small\"\n               ></TextField>\n            </div>\n            <div>\n               <FormLabel className=\"label\" id=\"demo-controlled-radio-buttons-group\">Payment Type <span className=\"text-danger\">*</span></FormLabel>\n\n               <RadioGroup row\n                  aria-labelledby=\"demo-controlled-radio-buttons-group\"\n                  name=\"paymentType\"\n                  value={paymentType}\n                  onChange={(e) => onValueChange(e)}\n               >\n                  <FormControlLabel value=\"Income\" control={<Radio required={true} />} label=\"Income\" />\n                  <FormControlLabel value=\"Expense\" control={<Radio required={true} />} label=\"Expense\" />\n               </RadioGroup>\n               <FormHelperText error>{errors.paymentType.errorMessage}</FormHelperText>\n            </div>\n            <div className=\"grid grid-2\">\n               <div sx={{padding: '20px'}}>\n                  <FormLabel className=\"label\" id=\"demo-controlled-radio-buttons-group\">Date of Invoice <span className=\"text-danger\">*</span></FormLabel>\n                  <LocalizationProvider dateAdapter={AdapterDayjs}>\n                     <Date\n                        name='dateOfInvoice'\n                        renderInput={(params) => <TextField {...params} size=\"small\" />}\n                        value={dateOfInvoice}\n                        onChange={(date) => setDateOfInvoice(date)}\n                     />\n                  </LocalizationProvider>\n                 <FormHelperText error>{errors.dateOfInvoice.error && errors.dateOfInvoice.errorMessage}</FormHelperText>\n               </div>\n               <div>\n                  <FormLabel className=\"label\" id=\"demo-controlled-radio-buttons-group\">Date of Payment <span className=\"text-danger\">*</span></FormLabel>\n                  <LocalizationProvider dateAdapter={AdapterDayjs}>\n                     <Date\n                        name='dateOfPayment'\n                        renderInput={(params) => <TextField {...params} size=\"small\" />}\n                        value={dateOfPayment}\n                        onChange={(date) => setDateOfPayment(date)}\n                     />\n                  </LocalizationProvider>\n                  <FormHelperText error>{errors.dateOfPayment.error && errors.dateOfPayment.errorMessage}</FormHelperText>\n               </div>\n            </div>\n            <div>\n               <FormLabel className=\"label\" id=\"demo-controlled-radio-buttons-group\">Description</FormLabel>\n\n               <TextField\n                  multiline rows={5}\n                  fullWidth\n                  type={'text'} onChange={(e) => onValueChange(e)}\n                  name='description'\n                  value={description}\n                  size=\"small\"\n               ></TextField>\n\n            </div>\n            <div>\n               <FormLabel className=\"label\" id=\"demo-controlled-radio-buttons-group\">Payment Proof</FormLabel>\n               \n               <span className=\"input-file\" >\n                  <FileBase64\n                     type=\"file\"\n                     sx={{ display: 'none' }}\n                     multiple={false}\n                     onDone={({ base64 }) => { handleImageData(base64) }}\n                  />\n               </span>\n            </div>\n\n            <div className=\"grid grid-2 mt-4\">\n               <button className=\"btn btn-secondary btn-danger\" onClick={() => clear()}>\n                  Reset\n               </button>\n               <button className=\"btn btn-primary\" disabled={loadingRef.current} onClick={() => validateItemDetails()}>\n                  {loadingRef.current ? 'Adding...' : 'Add Item'}\n                  {loadingRef.current && <FontAwesomeIcon icon=\"spinner\" spin />}\n               </button>\n            </div>\n         </div>\n\n      </Container >\n\n\n   );\n}\n\nexport default ItemForm;","import React, { useRef, useState } from \"react\";\nimport {\n   Container,\n   FormLabel,\n   TextField,\n   RadioGroup,\n   Radio,\n   FormControlLabel,\n   FormHelperText,\n   MenuItem,\n   FormControl,\n   InputLabel,\n   Select,\n} from \"@mui/material\";\nimport FileBase64 from \"react-file-base64\";\nimport Cookies from \"universal-cookie\";\nimport { DatePicker } from '@mui/x-date-pickers/DatePicker';\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\nimport { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';\nimport styled from \"@emotion/styled\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { toast } from \"react-toastify\";\nimport { createInvestment } from '../../api/index';\nimport '../../styles/itemform.css';\n\nconst Date = styled(DatePicker)`\n    width: 300px\n`;\n\nconst InvestmentForm = (props) => {\n\n\n   let user = JSON.parse(localStorage.getItem('user-info'));\n\n   let QualifyArray = [\n      \"None\",\n      \"80C\",\n      \"80D\"\n   ];\n\n   let CategoryArray = [\n      \"Stock\",\n      \"Mutual Funds\",\n      \"Fixed Deposit\"\n   ];\n\n   const [investmentData, setInvestmentData] = useState({\n      investmentName: \"\",\n      investmentAmount: \"\",\n      investmentVendor: \"\",\n      investmentDate: null,\n      investmentDuration: \"\",\n      dateOfMature: null,\n      modeOfPayment: \"Online\",\n      onlinePaymentDetails: {\n         onlinebank: \"\",\n         onlinepaymentDate: null,\n         paymentId: \"\",\n      },\n      cashReceipt: \"\",\n      chequeDetails: {\n         chequebank: \"\",\n         chequeNumber: \"\",\n         chequepaymentDate: null,\n      },\n      investmentDocuments: [],\n      investmentQualify: \"\",\n      investmentCategory: \"\",\n      description: \"\",\n      contactPerson: {\n         personName: \"\",\n         contactNumber: \"\",\n      },\n      userId: user.id\n   });\n\n   const { investmentName, investmentAmount, investmentVendor, investmentDate, investmentDuration, dateOfMature, modeOfPayment, onlinePaymentDetails: { onlinebank, onlinepaymentDate, paymentId }, cashReceipt, chequeDetails: { chequebank, chequeNumber, chequepaymentDate }, investmentDocuments, investmentQualify, investmentCategory, description, contactPerson: { personName, contactNumber }, userId, } = investmentData;\n\n   const [openQualifyMenu, setOpenQualifyMenu] = useState(false);\n   const [openCatMenu, setOpenCatMenu] = useState(false);\n   const { setRender, showModal, setShowModal } = props;\n\n   const loadingRef = useRef(false);\n\n   var cookie = new Cookies();\n   cookie.set('user', userId, { path: '/' })\n\n   const [errors, setErrors] = useState({\n      investmentName: {\n         value: investmentName,\n         error: false,\n         errorMessage: ''\n      },\n      investmentAmount: {\n         value: investmentAmount,\n         error: false,\n         errorMessage: ''\n      },\n      investmentVendor: {\n         value: investmentVendor,\n         error: false,\n         errorMessage: ''\n      },\n      investmentDate: {\n         value: investmentDate,\n         error: false,\n         errorMessage: ''\n      },\n      investmentDuration: {\n         value: investmentDuration,\n         error: false,\n         errorMessage: ''\n      },\n      dateOfMature: {\n         value: dateOfMature,\n         error: false,\n         errorMessage: ''\n      },\n      modeOfPayment: {\n         value: modeOfPayment,\n         error: false,\n         errorMessage: ''\n      },\n      onlinePaymentDetails: {\n         onlinebank: {\n            value: onlinebank,\n            error: false,\n            errorMessage: ''\n         },\n         onlinepaymentDate: {\n            value: onlinepaymentDate,\n            error: false,\n            errorMessage: ''\n         },\n         paymentId: {\n            value: paymentId,\n            error: false,\n            errorMessage: ''\n         },\n      },\n      cashReceipt: {\n         value: cashReceipt,\n         error: false,\n         errorMessage: ''\n      },\n      chequeDetails: {\n         chequebank: {\n            value: chequebank,\n            error: false,\n            errorMessage: ''\n         },\n         chequeNumber: {\n            value: chequeNumber,\n            error: false,\n            errorMessage: ''\n         },\n         chequepaymentDate: {\n            value: chequepaymentDate,\n            error: false,\n            errorMessage: ''\n         },\n      },\n      investmentDocuments: {\n         value: investmentDocuments,\n         error: false,\n         errorMessage: ''\n      },\n      investmentQualify: {\n         value: investmentQualify,\n         error: false,\n         errorMessage: ''\n      },\n      investmentCategory: {\n         value: investmentCategory,\n         error: false,\n         errorMessage: ''\n      },\n      description: {\n         value: description,\n         error: false,\n         errorMessage: ''\n      },\n      contactPerson: {\n         value: personName,\n         error: false,\n         errorMessage: '',\n         personName: {\n            value: personName,\n            error: false,\n            errorMessage: ''\n         },\n         contactNumber: {\n            value: contactNumber,\n            error: false,\n            errorMessage: ''\n         },\n      }\n   })\n\n\n   const clear = () => {\n      setInvestmentData({ investmentName: '', investmentAmount: '',investmentVendor: '',  investmentDate: null, investmentDuration: '', dateOfMature: null, modeOfPayment: '', onlinePaymentDetails: { onlinebank: '', onlinepaymentDate: null, paymentId: '' }, cashReceipt: '', chequeDetails: { chequebank: '', chequeNumber: '', chequepaymentDate: null }, investmentQualify: '', investmentCategory: '', description: '', contactPerson: { personName: '', contactNumber: '' } });\n   }\n\n\n   function validateInvestmentDetails() {\n\n      loadingRef.current = true;\n\n\n      const errorFields = Object.keys(errors);\n      let newErrorValues = { ...errors }\n      let values = Object.values(investmentData)\n      let countErrors = 0;\n\n      for (let index = 0; index < errorFields.length; index++) {\n         const currentField = errorFields[index];\n         const currentValue = values[index];\n\n         if (currentField === \"cashReceipt\" || currentField === \"description\") {\n            continue;\n         }\n\n         if ((currentValue === '') || (currentValue === null)) {\n\n            console.log(currentField)\n            countErrors = countErrors + 1;\n            newErrorValues = {\n               ...newErrorValues,\n               [currentField]: {\n                  ...newErrorValues[currentField],\n                  error: true,\n                  errorMessage: 'This field is required'\n               }\n            }\n         } else {\n            newErrorValues = {\n               ...newErrorValues,\n               [currentField]: {\n                  ...newErrorValues[currentField],\n                  error: false,\n                  errorMessage: ''\n               }\n            }\n         }\n      }\n\n      if (investmentData.modeOfPayment === \"Online\") {         // Check if any online payment details are filled\n         const onlineDetailsFilled =\n            investmentData.onlinePaymentDetails.onlinebank ||\n            investmentData.onlinePaymentDetails.onlinepaymentDate ||\n            investmentData.onlinePaymentDetails.paymentId;\n\n         if (!onlineDetailsFilled) {\n            errors.modeOfPayment.errorMessage =\n               \"Online payment details are required.\";\n            setErrors({ ...errors });\n            countErrors++;\n            loadingRef.current = false;\n            return;\n         }\n      } else {\n         errors.modeOfPayment.errors = false;\n         errors.modeOfPayment.errorMessage = '';\n         setErrors({ ...errors });\n      }\n      if (investmentData.modeOfPayment === \"Cash\") {              // Check if cash receipt is empty\n         if (!handlecashReceiptImg(cashReceipt)) {\n\n            errors.modeOfPayment.errorMessage =\n               \"Please upload cash receipt\";\n            setErrors({ ...errors });\n            loadingRef.current = false;\n            countErrors++;\n            loadingRef.current = false;\n            return;\n         }\n      } else {\n         errors.modeOfPayment.errors = false;\n         errors.modeOfPayment.errorMessage = '';\n         setErrors({ ...errors });\n      }\n      if (investmentData.modeOfPayment === \"Cheque\") {      // Check if handleChequeDetailsChange is empty\n         const chequeDetailsFields = Object.keys(investmentData.chequeDetails);\n         if (chequeDetailsFields.some((field) => !investmentData.chequeDetails[field])) {\n            newErrorValues.modeOfPayment.error = true;\n            newErrorValues.modeOfPayment.errorMessage =\n               \"All Cheque Details are required when selecting Cheque payment mode\";\n            countErrors++;\n            loadingRef.current = false;\n            return;\n         }\n      } else {\n         errors.modeOfPayment.errors = false;\n         errors.modeOfPayment.errorMessage = '';\n         setErrors({ ...errors });\n      }\n\n\n      // Check if point of contact is empty\n\n      const contactDetailsFilled =\n         investmentData.contactPerson.personName &&\n         investmentData.contactPerson.contactNumber;\n\n      if (!contactDetailsFilled) {\n         errors.contactPerson.errorMessage =\n            \"Person details are required.\";\n         setErrors({ ...errors });\n         loadingRef.current = false;\n         return;\n      } else {\n         errors.contactPerson.errors = false;\n         errors.contactPerson.errorMessage = '';\n         setErrors({ ...errors });\n      }\n\n      setErrors(newErrorValues);\n      if (countErrors !== 0) loadingRef.current = false;\n      if (countErrors === 0) addInvestmentDetails();\n      setTimeout(() => {\n         loadingRef.current = false;\n\n      }, 2000);\n\n   }\n\n   const addInvestmentDetails = async () => {\n\n      await createInvestment(investmentData);\n\n      setShowModal({ ...showModal, openDialog: false });\n      setRender('addSet');\n\n      toast.success(\"Investment Added Successfully!!\", {\n         position: \"top-center\",\n         autoClose: 2000,\n         hideProgressBar: false,\n         closeOnClick: true,\n         theme: \"light\",\n      });\n   }\n\n   \n   const onValueChange = (e) => {\n\n      setErrors({\n         ...errors,\n         [e.target.name]: {\n            ...errors[e.target.name],\n            error: false,\n            errorMessage: ''\n         }\n      })\n      setInvestmentData({ ...investmentData, [e.target.name]: e.target.value })\n   }\n\n   const setDateOfMature = (date) => {\n      setInvestmentData({ ...investmentData, dateOfMature: date })\n      setErrors({ ...errors, dateOfMature: { ...errors[dateOfMature], error: false, errorMessage: '' } })\n   }\n\n   const setInvestmentDate = (date) => {\n      setInvestmentData({ ...investmentData, investmentDate: date })\n      setErrors({ ...errors, investmentDate: { ...errors[investmentDate], error: false, errorMessage: '' } })\n   }\n\n   const handlecashReceiptImg = (img) => {\n\n\n      setInvestmentData({ ...investmentData, cashReceipt: img });\n\n      const validExtensions = ['png', 'jpeg', 'jpg', 'pdf'];\n      const fileExtension = img.split(';')[0].split('/')[1]\n      if (!validExtensions.includes(fileExtension)) {\n         setErrors({\n            ...errors,\n            modeOfPayment: {\n               ...errors.modeOfPayment,\n               error: true,\n               errorMessage: 'File must be in img and pdf format'\n            }\n         });\n         return;\n      }\n      const newRes = (img.length * (3 / 4)) - 2;\n      const size = (newRes / (1024 * 1024));\n\n      if (size > 2) {\n         setErrors({\n            ...errors,\n            modeOfPayment: {\n               ...errors.modeOfPayment,\n               error: true,\n               errorMessage: 'File size should not exceed 2MB.'\n            }\n         });\n         return;\n      }\n      setErrors({\n         ...errors,\n         modeOfPayment: {\n            ...errors.modeOfPayment,\n            error: false,\n            errorMessage: ''\n         }\n      });\n\n      return true;\n   }\n\n   const handleOnlinePaymentDetailsChange = (field, value) => {\n\n      setInvestmentData({\n         ...investmentData,\n         onlinePaymentDetails: {\n            ...investmentData.onlinePaymentDetails,\n            [field]: value\n         },\n      });\n   };\n\n   const handleChequeDetailsChange = (field, value) => {\n      setInvestmentData({\n         ...investmentData,\n         chequeDetails: {\n            ...investmentData.chequeDetails,\n            [field]: value,\n         },\n      });\n   };\n\n\n   const handleInvestmentDocuments = (images) => {\n\n\n      const maxSize = 2 * 1024 * 1024; // 2MB in bytes\n      let isValidSize = true;\n\n      images.forEach((image) => {\n         const fileSize = image.file.size;\n         if (fileSize > maxSize) {\n            isValidSize = false;\n            return;\n         }\n      });\n\n      if (!isValidSize) {\n\n         setErrors({\n            ...errors,\n            investmentDocuments: {\n               ...errors.investmentDocuments,\n               error: false,\n               errorMessage: 'File size should not exceed 2MB.'\n            }\n         });\n         return;\n      }\n\n      // To check the file extension\n      const allowedFileExtensions = [\"jpg\", \"jpeg\", \"png\", \"pdf\"];\n\n      let isValidExtensions = true;\n\n      images.forEach((image) => {\n         const fileSize = image.file.size;\n         if (fileSize > maxSize) {\n            isValidSize = false;\n            return;\n         }\n\n         const fileExtension = image.file.type.split(\"/\")[1]; // Get the file extension\n         if (!allowedFileExtensions.includes(fileExtension)) {\n            isValidExtensions = false;\n            return;\n         }\n      });\n      if (!isValidExtensions) {\n\n         setErrors({\n            ...errors,\n            investmentDocuments: {\n               ...errors.investmentDocuments,\n               error: false,\n               errorMessage: 'Allowed file formats: jpg, jpeg, png, pdf.'\n            }\n         });\n\n         return;\n      }\n\n      setInvestmentData({\n         ...investmentData,\n         investmentDocuments: images.map((image) => image.base64)\n      });\n\n      setErrors({\n         ...errors,\n         investmentDocuments: {\n            ...errors.investmentDocuments,\n            error: false,\n            errorMessage: ''\n         }\n      });\n   };\n\n\n   const handleContactPersonDetailsChange = (field, value) => {\n\n      if (field === \"personName\") {\n         // Allow only alphabetic characters and spaces\n         value = value.replace(/[^A-Za-z\\s]/g, \"\");\n      } else if (field === \"contactNumber\") {\n         // Allow only digits and limit to 10 characters\n         value = value.replace(/[^\\d]/g, \"\").slice(0, 10);\n      }\n\n      setInvestmentData({\n         ...investmentData,\n         contactPerson: {\n            ...investmentData.contactPerson,\n            [field]: value,\n         },\n      });\n   };\n   return (\n      <Container>\n         <div className=\"item-form\">\n            <div >\n               <FormLabel className=\"label\" id=\"demo-controlled-radio-buttons-group\">Investment Name <span className=\"text-danger\">*</span></FormLabel>\n\n               <TextField variant='outlined' fullWidth\n                  type={'text'} onChange={(e) => onValueChange(e)}\n                  error={(errors.investmentName.error)}\n                  helperText={(errors.investmentName.error && errors.investmentName.errorMessage)}\n                  name='investmentName' value={investmentName}\n                  size=\"small\"\n                  inputProps={{ maxLength: 250 }}\n               ></TextField>\n            </div>\n            <div >\n\n\n               <FormLabel className=\"label\" id=\"demo-controlled-radio-buttons-group\">Investment Vender <span className=\"text-danger\">*</span></FormLabel>\n\n               <TextField variant='outlined' fullWidth\n                  type={'text'} onChange={(e) => onValueChange(e)}\n                  error={(errors.investmentVendor.error)}\n                  helperText={(errors.investmentVendor.error && errors.investmentVendor.errorMessage)}\n                  name='investmentVendor' value={investmentVendor}\n                  size=\"small\"\n                  inputProps={{ maxLength: 250 }}\n               ></TextField>\n            </div>\n\n\n            <div className=\"grid grid-2\">\n               <div sx={{ padding: '20px' }}>\n                  <FormLabel className=\"label\" id=\"demo-controlled-radio-buttons-group\">Investment Amount <span className=\"text-danger\">*</span></FormLabel>\n\n                  <TextField type={'text'} onChange={(e) => onValueChange(e)}\n                     name='investmentAmount' fullWidth\n                     error={(errors.investmentAmount.error) || (investmentAmount !== '' && !investmentAmount.match(/^\\d+$/))}\n                     helperText={(errors.investmentAmount.error && errors.investmentAmount.errorMessage) || (!investmentAmount.match(/^\\d+$/) && investmentAmount !== '' ? 'Only digits are allowed' : '')}\n                     value={investmentAmount}\n                     size=\"small\"\n                  ></TextField>\n               </div>\n\n               <div>\n                  <FormLabel className=\"label\" id=\"demo-controlled-radio-buttons-group\">Investment Date <span className=\"text-danger\">*</span></FormLabel>\n                  {/* DatePicker or similar component */}\n                  <LocalizationProvider dateAdapter={AdapterDayjs}>\n                     <Date\n                        name='dateOfMature'\n                        renderInput={(params) => <TextField {...params} size=\"small\" />}\n                        value={investmentDate}\n                        onChange={(date) => setInvestmentDate(date)}\n                     />\n                     <FormHelperText error>{errors.investmentDate.error && errors.investmentDate.errorMessage}</FormHelperText>\n                  </LocalizationProvider>\n               </div>\n            </div>\n            <div className=\"grid grid-2\">\n               <div sx={{ padding: '20px' }}>\n\n                  <FormLabel className=\"label\" id=\"demo-controlled-radio-buttons-group\">Investment Duration <span className=\"text-danger\">*</span></FormLabel>\n\n                  <TextField type={'text'} onChange={(e) => onValueChange(e)}\n                     name='investmentDuration' fullWidth\n                     error={(errors.investmentDuration.error) || (investmentDuration !== '' && !investmentDuration.match(/^\\d+$/))}\n                     helperText={(errors.investmentDuration.error && errors.investmentDuration.errorMessage) || (!investmentDuration.match(/^\\d+$/) && investmentDuration !== '' ? 'Only digits are allowed' : '')}\n                     value={investmentDuration}\n                     size=\"small\"\n                  ></TextField>\n               </div>\n               <div>\n                  <FormLabel className=\"label\" id=\"demo-controlled-radio-buttons-group\">Date of Mature <span className=\"text-danger\">*</span></FormLabel>\n                  {/* DatePicker or similar component */}\n                  <LocalizationProvider dateAdapter={AdapterDayjs}>\n                     <Date\n                        name='dateOfMature'\n                        renderInput={(params) => <TextField {...params} size=\"small\" />}\n                        value={dateOfMature}\n                        onChange={(date) => setDateOfMature(date)}\n                     />\n                     <FormHelperText error>{errors.dateOfMature.error && errors.dateOfMature.errorMessage}</FormHelperText>\n                  </LocalizationProvider>\n               </div>\n            </div>\n            <div>\n               <FormLabel className=\"label\" id=\"demo-controlled-radio-buttons-group\">Mode of Payment <span className=\"text-danger\">*</span></FormLabel>\n\n               <RadioGroup row\n                  aria-labelledby=\"demo-controlled-radio-buttons-group\"\n                  name=\"modeOfPayment\"\n                  value={modeOfPayment}\n                  onChange={(e) => onValueChange(e)}\n               >\n                  <FormControlLabel\n                     value=\"Online\"\n                     control={<Radio />}\n                     label=\"Online\"\n                  />\n                  <FormControlLabel value=\"Cash\" control={<Radio />} label=\"Cash\" />\n                  <FormControlLabel\n                     value=\"Cheque\"\n                     control={<Radio />}\n                     label=\"Cheque\"\n                  />\n               </RadioGroup>\n            </div>\n            {/* Online Payment Details */}\n            {investmentData.modeOfPayment === \"Online\" && (\n               <>\n                  <FormLabel className=\"label\" id=\"demo-controlled-radio-buttons-group\">Online Payment Details</FormLabel>\n                  <div>\n                     <FormLabel className=\"sub-label\">Bank</FormLabel>\n                     <TextField\n                        fullWidth\n                        variant=\"outlined\"\n                        size=\"small\"\n                        inputProps={{ maxLength: 250 }}\n                        value={investmentData.onlinePaymentDetails.onlinebank}\n                        onChange={(e) =>\n                           handleOnlinePaymentDetailsChange(\"onlinebank\", e.target.value)\n                        }\n                     />\n                  </div>\n                  <div className=\"grid grid-2\">\n                     <div sx={{ padding: '20px' }}>\n\n                        <FormLabel className=\"label\" id=\"demo-controlled-radio-buttons-group\">Date of Payment<span className=\"text-danger\">*</span></FormLabel>\n                        <LocalizationProvider dateAdapter={AdapterDayjs}>\n                           <Date\n                              name='onlinepaymentDate'\n                              renderInput={(params) => <TextField {...params} size=\"small\" />}\n                              value={onlinepaymentDate}\n                              onChange={(date) => handleOnlinePaymentDetailsChange(\"onlinepaymentDate\", date)}\n                           />\n                        </LocalizationProvider>\n                     </div>\n                     <div>\n                        <FormLabel className=\"label\" id=\"demo-controlled-radio-buttons-group\">Payment ID<span className=\"text-danger\">*</span></FormLabel>\n                        <TextField\n                           name=\"paymentId\"\n                           fullWidth\n                           variant=\"outlined\"\n                           size=\"small\"\n                           inputProps={{ maxLength: 100 }}\n                           value={investmentData.onlinePaymentDetails.paymentId}\n                           onChange={(e) =>\n                              handleOnlinePaymentDetailsChange(\"paymentId\", e.target.value)\n                           }\n                        />\n                     </div>\n                  </div>\n               </>\n            )}\n            {/* Cash Receipt */}\n            {investmentData.modeOfPayment === \"Cash\" && (\n               <div>\n                  <FormLabel className=\"label\" id=\"demo-controlled-radio-buttons-group\">Cash Receipt<span className=\"text-danger\">*</span></FormLabel>\n                  <span className=\"input-file\" >\n                     <FileBase64\n                        name=\"cashReceipt\"\n                        type=\"file\"\n                        sx={{ display: 'none' }}\n                        multiple={false}\n                        onDone={({ base64 }) => { handlecashReceiptImg(base64) }}\n                     />\n                  </span>\n               </div>\n            )}\n            {/* Cheque Details */}\n            {investmentData.modeOfPayment === \"Cheque\" && (\n               <>\n                  <FormLabel className=\"label\">Cheque Details</FormLabel>\n                  <div>\n                     <FormLabel className=\"sub-label\">Bank</FormLabel>\n                     <TextField\n                        fullWidth\n                        variant=\"outlined\"\n                        size=\"small\"\n                        inputProps={{ maxLength: 250 }}\n                        value={investmentData.chequeDetails.chequebank}\n                        onChange={(e) =>\n                           handleChequeDetailsChange(\"chequebank\", e.target.value)\n                        }\n                     />\n                  </div>\n                  <div className=\"grid grid-2\">\n                     <div sx={{ padding: '20px' }}>\n\n                        <FormLabel className=\"label\" id=\"demo-controlled-radio-buttons-group\">Payment Date <span className=\"text-danger\">*</span></FormLabel>\n                        {/* DatePicker or similar component */}\n                        <LocalizationProvider dateAdapter={AdapterDayjs}>\n                           <Date\n                              name='chequepaymentDate'\n                              renderInput={(params) => <TextField {...params} size=\"small\" />}\n                              value={chequepaymentDate}\n                              onChange={(date) => handleChequeDetailsChange(\"chequepaymentDate\", date)}\n                           />\n                        </LocalizationProvider>\n                     </div>\n                     <div>\n                        <FormLabel className=\"label\" id=\"demo-controlled-radio-buttons-group\">Cheque Number<span className=\"text-danger\">*</span></FormLabel>\n                        <TextField\n                           fullWidth\n                           variant=\"outlined\"\n                           size=\"small\"\n                           inputProps={{ maxLength: 100 }}\n                           name=\"chequeNumber\"\n                           value={investmentData.chequeDetails.chequeNumber}\n                           onChange={(e) =>\n                              handleChequeDetailsChange(\"chequeNumber\", e.target.value)\n                           }\n                        />\n                     </div>\n                  </div>\n               </>\n\n            )}\n            <FormHelperText error>{errors.modeOfPayment.errorMessage}</FormHelperText>\n            <div>\n               <FormLabel className=\"label\" id=\"demo-controlled-radio-buttons-group\">Investment Document<span className=\"text-danger\">*</span></FormLabel>\n               <span className=\"input-file\" >\n                  <FileBase64\n                     name=\"investmentDocuments\"\n                     type=\"file\"\n                     sx={{ display: 'none' }}\n                     multiple={true}\n                     onDone={(images) => handleInvestmentDocuments(images)}\n                  />\n                  <FormHelperText error>{errors.investmentDocuments.errorMessage}</FormHelperText>\n               </span>\n            </div>\n            <div className=\"grid grid-2\">\n               <div sx={{ padding: '20px' }}>\n\n                  <FormControl className='FilterFormControl' sx={{ minWidth: '250px' }} size=\"small\">\n                     <InputLabel id=\"demo-simple-select-label\">Investment Qualify</InputLabel>\n                     <Select\n                        labelId=\"demo-simple-select-label\"\n                        id=\"demo-simple-select\"\n                        open={openQualifyMenu}\n                        name=\"investmentQualify\"\n                        value={investmentQualify}\n                        onClose={() => { setOpenQualifyMenu(false) }}\n                        onOpen={() => { setOpenQualifyMenu(true) }}\n                        label=\"Filter\"\n                        onChange={onValueChange}>\n\n                        {QualifyArray && QualifyArray.map((qualify, index) => (\n                           <MenuItem value={qualify.toLowerCase()} key={qualify + index} >\n                              {qualify}\n                           </MenuItem>))\n                        }\n\n                     </Select>\n                  </FormControl>\n                  <FormHelperText error>{errors.investmentQualify.errorMessage}</FormHelperText>\n               </div>\n               <div >\n                  <FormControl className='FilterFormControl' sx={{ minWidth: '250px' }} size=\"small\">\n                     <InputLabel id=\"demo-simple-select-label\">Investment Category</InputLabel>\n                     <Select\n                        labelId=\"demo-simple-select-label\"\n                        id=\"demo-simple-select\"\n                        open={openCatMenu}\n                        name=\"investmentCategory\"\n                        value={investmentCategory}\n                        onClose={() => { setOpenCatMenu(false) }}\n                        onOpen={() => { setOpenCatMenu(true) }}\n                        label=\"Filter\"\n                        onChange={onValueChange}>\n\n                        {CategoryArray && CategoryArray.map((cat, index) => (\n                           <MenuItem value={cat} key={cat + index} >\n                              {cat}\n                           </MenuItem>))\n                        }\n                     </Select>\n                  </FormControl>\n                  <FormHelperText error>{errors.investmentCategory.errorMessage}</FormHelperText>\n               </div>\n            </div>\n            <div>\n               <FormLabel className=\"label\" id=\"demo-controlled-radio-buttons-group\">Investment Description<span className=\"text-danger\">*</span></FormLabel>\n               <TextField\n                  multiline rows={5}\n                  fullWidth\n                  type={'text'} onChange={(e) => onValueChange(e)}\n                  name='description'\n                  value={description}\n                  size=\"small\"\n                  inputProps={{ maxLength: 1000 }}\n               ></TextField>\n            </div>\n            <div>\n               <FormLabel className=\"label\" id=\"demo-controlled-radio-buttons-group\">Point Of Contact<span className=\"text-danger\">*</span></FormLabel>\n               <div className=\"grid grid-2\">\n                  <div sx={{ padding: '20px' }}>\n                     <FormLabel className=\"label\" id=\"demo-controlled-radio-buttons-group\">Name<span className=\"text-danger\">*</span></FormLabel>\n                     <TextField variant='outlined' fullWidth\n                        type={'text'} onChange={(e) => handleContactPersonDetailsChange(\"personName\", e.target.value)}\n                        error={(errors.contactPerson.personName.error)}\n                        helperText={(errors.contactPerson.personName.error && errors.contactPerson.personName.errorMessage)}\n                        name='personName' value={investmentData.contactPerson.personName}\n                        size=\"small\"\n                        inputProps={{ maxLength: 250 }}\n                     ></TextField>\n                  </div>\n                  <div>\n                     <FormLabel className=\"label\" id=\"demo-controlled-radio-buttons-group\">Contact Number<span className=\"text-danger\">*</span></FormLabel>\n                     <TextField variant='outlined' fullWidth\n                        type={'text'} onChange={(e) => handleContactPersonDetailsChange(\"contactNumber\", e.target.value)}\n                        error={(errors.contactPerson.contactNumber.error)}\n                        helperText={\n                           (errors.contactPerson.contactNumber.error &&\n                              errors.contactPerson.contactNumber.errorMessage) ||\n                           (investmentData.contactPerson.contactNumber.length !== 10 &&\n                              investmentData.contactPerson.contactNumber.length > 0 &&\n                              \"Contact number should be exactly 10 digits\")\n                        }\n                        name='contacNumber' value={investmentData.contactPerson.contactNumber}\n                        size=\"small\"\n                     ></TextField>\n                  </div>\n                  <FormHelperText error>{errors.contactPerson.errorMessage}</FormHelperText>\n               </div>\n            </div>\n            <div className=\"grid grid-2 mt-4\">\n               <button className=\"btn btn-secondary btn-danger\" onClick={() => clear()}>\n                  Reset\n               </button>\n               <button className=\"btn btn-primary\" disabled={loadingRef.current} onClick={() => validateInvestmentDetails()}>\n                  {loadingRef.current ? 'Adding...' : 'Add Investment'}\n                  {loadingRef.current && <FontAwesomeIcon icon=\"spinner\" spin />}\n               </button>\n            </div>\n         </div>\n      </Container>\n   );\n};\n\nexport default InvestmentForm;\n","import React, { useEffect, useRef, useState } from \"react\";\nimport {\n   Container,\n   FormLabel,\n   TextField,\n   RadioGroup,\n   Radio,\n   FormControlLabel,\n   FormHelperText,\n   MenuItem,\n   FormControl,\n   InputLabel,\n   Select,\n} from \"@mui/material\";\nimport FileBase64 from \"react-file-base64\";\nimport Cookies from \"universal-cookie\";\nimport { DatePicker } from '@mui/x-date-pickers/DatePicker';\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\nimport { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';\nimport styled from \"@emotion/styled\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { toast } from \"react-toastify\";\nimport { getInvestment, updateInvestment } from '../../api/index';\nimport '../../styles/itemform.css';\n\nconst Date = styled(DatePicker)`\n    width: 300px\n`;\n\nconst EditInvestment = (props) => {\n\n\n   let user = JSON.parse(localStorage.getItem('user-info'));\n\n   let QualifyArray = [\n      \"None\",\n      \"80C\",\n      \"80D\"\n   ];\n\n   let CategoryArray = [\n      \"Stock\",\n      \"Mutual Funds\",\n      \"Fixed Deposit\"\n   ];\n\n   const [investmentData, setInvestmentData] = useState({\n      investmentName: \"\",\n      investmentAmount: \"\",\n      investmentVendor: \"\",\n      investmentDate: null,\n      investmentDuration: \"\",\n      dateOfMature: null,\n      modeOfPayment: \"Online\",\n      onlinePaymentDetails: {\n         onlinebank: \"\",\n         onlinepaymentDate: null,\n         paymentId: \"\",\n      },\n      cashReceipt: \"\",\n      chequeDetails: {\n         chequebank: \"\",\n         chequeNumber: \"\",\n         chequepaymentDate: null,\n      },\n      investmentDocuments: [],\n      investmentQualify: \"\",\n      investmentCategory: \"\",\n      description: \"\",\n      contactPerson: {\n         personName: \"\",\n         contactNumber: \"\",\n      },\n      userId: user.id\n   });\n\n\n\n   const { investmentName, investmentAmount, investmentVendor, investmentDate, investmentDuration, dateOfMature, modeOfPayment, onlinePaymentDetails: { onlinebank, onlinepaymentDate, paymentId }, cashReceipt, chequeDetails: { chequebank, chequeNumber, chequepaymentDate }, investmentDocuments, investmentQualify, investmentCategory, description, contactPerson: { personName, contactNumber }, userId } = investmentData;\n\n   const { setRender, showModal, setShowModal } = props;\n\n   const Investment = showModal.currInvestment;\n\n   const id = Investment._id;\n\n   const [openQualifyMenu, setOpenQualifyMenu] = useState(false);\n   const [openCatMenu, setOpenCatMenu] = useState(false);\n\n   var cookie = new Cookies();\n   cookie.set('user', userId, { path: '/' })\n\n   const loadingRef = useRef(false);\n\n   useEffect(() => {\n      const loadItemDetails = async () => {\n         const response = await getInvestment(id);\n\n         setInvestmentData(response.data);\n      }\n      loadItemDetails();\n   }, [id]);\n\n   const [errors, setErrors] = useState({\n      investmentName: {\n         value: Investment.investmentName,\n         error: false,\n         errorMessage: ''\n      },\n      investmentAmount: {\n         value: Investment.investmentAmount,\n         error: false,\n         errorMessage: ''\n      },\n      investmentVendor: {\n         value: Investment.investmentVendor,\n         error: false,\n         errorMessage: ''\n      },\n      investmentDate: {\n         value: Investment.investmentDate,\n         error: false,\n         errorMessage: ''\n      },\n      investmentDuration: {\n         value: Investment.investmentDuration,\n         error: false,\n         errorMessage: ''\n      },\n      dateOfMature: {\n         value: Investment.dateOfMature,\n         error: false,\n         errorMessage: ''\n      },\n      modeOfPayment: {\n         value: Investment.modeOfPayment,\n         error: false,\n         errorMessage: ''\n      },\n      onlinePaymentDetails: {\n         onlinebank: {\n            value: Investment.onlinePaymentDetails.onlinebank,\n            error: false,\n            errorMessage: ''\n         },\n         onlinepaymentDate: {\n            value: Investment.onlinePaymentDetails.onlinepaymentDate,\n            error: false,\n            errorMessage: ''\n         },\n         paymentId: {\n            value: Investment.onlinePaymentDetails.paymentId,\n            error: false,\n            errorMessage: ''\n         },\n      },\n      cashReceipt: {\n         value: Investment.cashReceipt,\n         error: false,\n         errorMessage: ''\n      },\n      chequeDetails: {\n         chequebank: {\n            value: Investment.chequeDetails.chequebank,\n            error: false,\n            errorMessage: ''\n         },\n         chequeNumber: {\n            value: Investment.chequeDetails.chequeNumber,\n            error: false,\n            errorMessage: ''\n         },\n         chequepaymentDate: {\n            value: Investment.chequeDetails.chequepaymentDate,\n            error: false,\n            errorMessage: ''\n         },\n      },\n      investmentDocuments: {\n         value: Investment.investmentDocuments,\n         error: false,\n         errorMessage: ''\n      },\n      investmentQualify: {\n         value: Investment.investmentQualify,\n         error: false,\n         errorMessage: ''\n      },\n      investmentCategory: {\n         value: Investment.investmentCategory,\n         error: false,\n         errorMessage: ''\n      },\n      description: {\n         value: Investment.description,\n         error: false,\n         errorMessage: ''\n      },\n      contactPerson: {\n         value: Investment.contactPerson.personName,\n         error: false,\n         errorMessage: '',\n         personName: {\n            value: Investment.contactPerson.personName,\n            error: false,\n            errorMessage: ''\n         },\n         contactNumber: {\n            value: Investment.contactPerson.contactNumber,\n            error: false,\n            errorMessage: ''\n         },\n      }\n   })\n\n\n   const clear = () => {\n      setInvestmentData({ investmentName: '', investmentAmount: '', investmentVendor: '', investmentDate: null, investmentDuration: '', dateOfMature: null, modeOfPayment: '', onlinePaymentDetails: { onlinebank: '', onlinepaymentDate: null, paymentId: '' }, cashReceipt: '', chequeDetails: { chequebank: '', chequeNumber: '', chequepaymentDate: null }, investmentQualify: '', investmentCategory: '', description: '', contactPerson: { personName: '', contactNumber: '' } });\n   }\n\n\n   function validateInvestmentDetails() {\n\n      loadingRef.current = true;\n\n\n      const errorFields = Object.keys(errors);\n      let newErrorValues = { ...errors }\n      let values = Object.values(investmentData)\n      let countErrors = 0;\n\n      for (let index = 0; index < errorFields.length; index++) {\n         const currentField = errorFields[index];\n         const currentValue = values[index];\n\n         if (currentField === \"cashReceipt\" || currentField === \"description\") {\n            continue;\n         }\n\n         if (investmentQualify !== \"\")\n            continue;\n\n         if ((currentValue === '') || (currentValue === null)) {\n\n            countErrors = countErrors + 1;\n            newErrorValues = {\n               ...newErrorValues,\n               [currentField]: {\n                  ...newErrorValues[currentField],\n                  error: true,\n                  errorMessage: 'This field is required'\n               }\n            }\n         } else {\n            newErrorValues = {\n               ...newErrorValues,\n               [currentField]: {\n                  ...newErrorValues[currentField],\n                  error: false,\n                  errorMessage: ''\n               }\n            }\n         }\n      }\n\n      if (investmentData.modeOfPayment === \"Online\") {         // Check if any online payment details are filled\n         const onlineDetailsFilled =\n            investmentData.onlinePaymentDetails.onlinebank ||\n            investmentData.onlinePaymentDetails.onlinepaymentDate ||\n            investmentData.onlinePaymentDetails.paymentId;\n\n         if (!onlineDetailsFilled) {\n            errors.modeOfPayment.errorMessage =\n               \"Online payment details are required.\";\n            setErrors({ ...errors });\n            countErrors++;\n            loadingRef.current = false;\n            return;\n         }\n      } else {\n         errors.modeOfPayment.errors = false;\n         errors.modeOfPayment.errorMessage = '';\n         setErrors({ ...errors });\n      }\n      if (investmentData.modeOfPayment === \"Cash\") {              // Check if cash receipt is empty\n         if (!handlecashReceiptImg(cashReceipt)) {\n\n            errors.modeOfPayment.errorMessage =\n               \"Please upload cash receipt\";\n            setErrors({ ...errors });\n            loadingRef.current = false;\n            countErrors++;\n            loadingRef.current = false;\n            return;\n         }\n      } else {\n         errors.modeOfPayment.errors = false;\n         errors.modeOfPayment.errorMessage = '';\n         setErrors({ ...errors });\n      }\n      if (investmentData.modeOfPayment === \"Cheque\") {      // Check if handleChequeDetailsChange is empty\n         const chequeDetailsFields = Object.keys(investmentData.chequeDetails);\n         if (chequeDetailsFields.some((field) => !investmentData.chequeDetails[field])) {\n            newErrorValues.modeOfPayment.error = true;\n            newErrorValues.modeOfPayment.errorMessage =\n               \"All Cheque Details are required when selecting Cheque payment mode\";\n            countErrors++;\n            loadingRef.current = false;\n            return;\n         }\n      } else {\n         errors.modeOfPayment.errors = false;\n         errors.modeOfPayment.errorMessage = '';\n         setErrors({ ...errors });\n      }\n\n\n      // Check if point of contact is empty\n\n      const contactDetailsFilled =\n         investmentData.contactPerson.personName &&\n         investmentData.contactPerson.contactNumber;\n\n      if (!contactDetailsFilled) {\n         errors.contactPerson.errorMessage =\n            \"Person details are required.\";\n         setErrors({ ...errors });\n         loadingRef.current = false;\n         return;\n      } else {\n         errors.contactPerson.errors = false;\n         errors.contactPerson.errorMessage = '';\n         setErrors({ ...errors });\n      }\n\n      setErrors(newErrorValues);\n      if (countErrors !== 0) loadingRef.current = false;\n      if (countErrors === 0) editInvestmentDetails();\n      setTimeout(() => {\n         loadingRef.current = false;\n\n      }, 2000);\n\n   }\n\n   const editInvestmentDetails = async () => {\n\n      await updateInvestment(id, investmentData);\n\n      setShowModal({ ...showModal, openDialog: false });\n      setRender('editSet');\n\n      toast.success(\"Investment updated Successfully!!\", {\n         position: \"top-center\",\n         autoClose: 2000,\n         hideProgressBar: false,\n         closeOnClick: true,\n         theme: \"light\",\n      });\n   }\n\n   const onValueChange = (e) => {\n\n      setErrors({\n         ...errors,\n         [e.target.name]: {\n            ...errors[e.target.name],\n            error: false,\n            errorMessage: ''\n         }\n      })\n      setInvestmentData({ ...investmentData, [e.target.name]: e.target.value })\n   }\n\n   const setDateOfMature = (date) => {\n      setInvestmentData({ ...investmentData, dateOfMature: date })\n      setErrors({ ...errors, dateOfMature: { ...errors[dateOfMature], error: false, errorMessage: '' } })\n   }\n\n   const setInvestmentDate = (date) => {\n      setInvestmentData({ ...investmentData, investmentDate: date })\n      setErrors({ ...errors, investmentDate: { ...errors[investmentDate], error: false, errorMessage: '' } })\n   }\n\n   const handlecashReceiptImg = (img) => {\n\n\n      setInvestmentData({ ...investmentData, cashReceipt: img });\n\n      const validExtensions = ['png', 'jpeg', 'jpg', 'pdf'];\n      const fileExtension = img.split(';')[0].split('/')[1]\n      if (!validExtensions.includes(fileExtension)) {\n         setErrors({\n            ...errors,\n            modeOfPayment: {\n               ...errors.modeOfPayment,\n               error: true,\n               errorMessage: 'File must be in img and pdf format'\n            }\n         });\n         return;\n      }\n      const newRes = (img.length * (3 / 4)) - 2;\n      const size = (newRes / (1024 * 1024));\n\n      if (size > 2) {\n         setErrors({\n            ...errors,\n            modeOfPayment: {\n               ...errors.modeOfPayment,\n               error: true,\n               errorMessage: 'File size should not exceed 2MB.'\n            }\n         });\n         return;\n      }\n      setErrors({\n         ...errors,\n         modeOfPayment: {\n            ...errors.modeOfPayment,\n            error: false,\n            errorMessage: ''\n         }\n      });\n\n      return true;\n   }\n\n   const handleOnlinePaymentDetailsChange = (field, value) => {\n\n      setInvestmentData({\n         ...investmentData,\n         onlinePaymentDetails: {\n            ...investmentData.onlinePaymentDetails,\n            [field]: value\n         },\n      });\n   };\n\n   const handleChequeDetailsChange = (field, value) => {\n      setInvestmentData({\n         ...investmentData,\n         chequeDetails: {\n            ...investmentData.chequeDetails,\n            [field]: value,\n         },\n      });\n   };\n\n\n   const handleInvestmentDocuments = (images) => {\n\n\n      const maxSize = 2 * 1024 * 1024; // 2MB in bytes\n      let isValidSize = true;\n\n      images.forEach((image) => {\n         const fileSize = image.file.size;\n         if (fileSize > maxSize) {\n            isValidSize = false;\n            return;\n         }\n      });\n\n      if (!isValidSize) {\n\n         setErrors({\n            ...errors,\n            investmentDocuments: {\n               ...errors.investmentDocuments,\n               error: false,\n               errorMessage: 'File size should not exceed 2MB.'\n            }\n         });\n         return;\n      }\n\n      // To check the file extension\n      const allowedFileExtensions = [\"jpg\", \"jpeg\", \"png\", \"pdf\"];\n\n      let isValidExtensions = true;\n\n      images.forEach((image) => {\n         const fileSize = image.file.size;\n         if (fileSize > maxSize) {\n            isValidSize = false;\n            return;\n         }\n\n         const fileExtension = image.file.type.split(\"/\")[1]; // Get the file extension\n         if (!allowedFileExtensions.includes(fileExtension)) {\n            isValidExtensions = false;\n            return;\n         }\n      });\n      if (!isValidExtensions) {\n\n         setErrors({\n            ...errors,\n            investmentDocuments: {\n               ...errors.investmentDocuments,\n               error: false,\n               errorMessage: 'Allowed file formats: jpg, jpeg, png, pdf.'\n            }\n         });\n\n         return;\n      }\n\n      setInvestmentData({\n         ...investmentData,\n         investmentDocuments: images.map((image) => image.base64)\n      });\n\n      setErrors({\n         ...errors,\n         investmentDocuments: {\n            ...errors.investmentDocuments,\n            error: false,\n            errorMessage: ''\n         }\n      });\n   };\n\n\n   const handleContactPersonDetailsChange = (field, value) => {\n\n      if (field === \"personName\") {\n         // Allow only alphabetic characters and spaces\n         value = value.replace(/[^A-Za-z\\s]/g, \"\");\n      } else if (field === \"contactNumber\") {\n         // Allow only digits and limit to 10 characters\n         value = value.replace(/[^\\d]/g, \"\").slice(0, 10);\n      }\n\n      setInvestmentData({\n         ...investmentData,\n         contactPerson: {\n            ...investmentData.contactPerson,\n            [field]: value,\n         },\n      });\n   };\n   return (\n      <Container>\n         <div className=\"item-form\">\n            <div >\n               <FormLabel className=\"label\" id=\"demo-controlled-radio-buttons-group\">Investment Name <span className=\"text-danger\">*</span></FormLabel>\n\n               <TextField variant='outlined' fullWidth\n                  type={'text'} onChange={(e) => onValueChange(e)}\n                  error={(errors.investmentName.error)}\n                  helperText={(errors.investmentName.error && errors.investmentName.errorMessage)}\n                  name='investmentName' value={investmentName}\n                  size=\"small\"\n                  inputProps={{ maxLength: 250 }}\n               ></TextField>\n            </div>\n            <div >\n\n\n               <FormLabel className=\"label\" id=\"demo-controlled-radio-buttons-group\">Investment Vender <span className=\"text-danger\">*</span></FormLabel>\n\n               <TextField variant='outlined' fullWidth\n                  type={'text'} onChange={(e) => onValueChange(e)}\n                  error={(errors.investmentVendor.error)}\n                  helperText={(errors.investmentVendor.error && errors.investmentVendor.errorMessage)}\n                  name='investmentVendor' value={investmentVendor}\n                  size=\"small\"\n                  inputProps={{ maxLength: 250 }}\n               ></TextField>\n            </div>\n\n\n            <div className=\"grid grid-2\">\n               <div sx={{ padding: '20px' }}>\n                  <FormLabel className=\"label\" id=\"demo-controlled-radio-buttons-group\">Investment Amount <span className=\"text-danger\">*</span></FormLabel>\n\n                  <TextField type={'text'} onChange={(e) => onValueChange(e)}\n                     name='investmentAmount' fullWidth\n                     error={errors.investmentAmount.error || (typeof investmentAmount === 'string' && !investmentAmount.match(/^\\d+$/))}\n                     helperText={\n                        (errors.investmentAmount.error && errors.investmentAmount.errorMessage) ||\n                        (typeof investmentAmount === 'string' && !investmentAmount.match(/^\\d+$/) && investmentAmount !== '' ? 'Only digits are allowed' : '')\n                     }\n                     value={investmentAmount}\n                     size=\"small\"\n                  ></TextField>\n               </div>\n\n               <div>\n                  <FormLabel className=\"label\" id=\"demo-controlled-radio-buttons-group\">Investment Date <span className=\"text-danger\">*</span></FormLabel>\n                  {/* DatePicker or similar component */}\n                  <LocalizationProvider dateAdapter={AdapterDayjs}>\n                     <Date\n                        name='dateOfMature'\n                        renderInput={(params) => <TextField {...params} size=\"small\" />}\n                        value={investmentDate}\n                        onChange={(date) => setInvestmentDate(date)}\n                     />\n                     <FormHelperText error>{errors.investmentDate.error && errors.investmentDate.errorMessage}</FormHelperText>\n                  </LocalizationProvider>\n               </div>\n            </div>\n            <div className=\"grid grid-2\">\n               <div sx={{ padding: '20px' }}>\n\n                  <FormLabel className=\"label\" id=\"demo-controlled-radio-buttons-group\">Investment Duration <span className=\"text-danger\">*</span></FormLabel>\n\n                  <TextField\n                     type=\"text\"\n                     onChange={(e) => onValueChange(e)}\n                     name=\"investmentDuration\"\n                     fullWidth\n                     error={!!errors.investmentDuration.error || (typeof investmentDuration === 'string' && !investmentDuration.match(/^\\d+$/))}\n                     helperText={\n                        errors.investmentDuration.error\n                           ? errors.investmentDuration.errorMessage\n                           : (typeof investmentDuration === 'string' && !investmentDuration.match(/^\\d+$/))\n                              ? 'Only digits are allowed'\n                              : ''\n                     }\n                     value={investmentDuration}\n                     size=\"small\"\n                  />\n\n               </div>\n               <div>\n                  <FormLabel className=\"label\" id=\"demo-controlled-radio-buttons-group\">Date of Mature <span className=\"text-danger\">*</span></FormLabel>\n                  {/* DatePicker or similar component */}\n                  <LocalizationProvider dateAdapter={AdapterDayjs}>\n                     <Date\n                        name='dateOfMature'\n                        renderInput={(params) => <TextField {...params} size=\"small\" />}\n                        value={dateOfMature}\n                        onChange={(date) => setDateOfMature(date)}\n                     />\n                     <FormHelperText error>{errors.dateOfMature.error && errors.dateOfMature.errorMessage}</FormHelperText>\n                  </LocalizationProvider>\n               </div>\n            </div>\n            <div>\n               <FormLabel className=\"label\" id=\"demo-controlled-radio-buttons-group\">Mode of Payment <span className=\"text-danger\">*</span></FormLabel>\n\n               <RadioGroup row\n                  aria-labelledby=\"demo-controlled-radio-buttons-group\"\n                  name=\"modeOfPayment\"\n                  value={modeOfPayment}\n                  onChange={(e) => onValueChange(e)}\n               >\n                  <FormControlLabel\n                     value=\"Online\"\n                     control={<Radio />}\n                     label=\"Online\"\n                  />\n                  <FormControlLabel value=\"Cash\" control={<Radio />} label=\"Cash\" />\n                  <FormControlLabel\n                     value=\"Cheque\"\n                     control={<Radio />}\n                     label=\"Cheque\"\n                  />\n               </RadioGroup>\n            </div>\n            {/* Online Payment Details */}\n            {investmentData.modeOfPayment === \"Online\" && (\n               <>\n                  <FormLabel className=\"label\" id=\"demo-controlled-radio-buttons-group\">Online Payment Details</FormLabel>\n                  <div>\n                     <FormLabel className=\"sub-label\">Bank</FormLabel>\n                     <TextField\n                        fullWidth\n                        variant=\"outlined\"\n                        size=\"small\"\n                        inputProps={{ maxLength: 250 }}\n                        value={onlinebank}\n                        onChange={(e) =>\n                           handleOnlinePaymentDetailsChange(\"onlinebank\", e.target.value)\n                        }\n                     />\n                  </div>\n                  <div className=\"grid grid-2\">\n                     <div sx={{ padding: '20px' }}>\n\n                        <FormLabel className=\"label\" id=\"demo-controlled-radio-buttons-group\">Date of Payment<span className=\"text-danger\">*</span></FormLabel>\n                        <LocalizationProvider dateAdapter={AdapterDayjs}>\n                           <Date\n                              name='onlinepaymentDate'\n                              renderInput={(params) => <TextField {...params} size=\"small\" />}\n                              value={onlinepaymentDate}\n                              onChange={(date) => handleOnlinePaymentDetailsChange(\"onlinepaymentDate\", date)}\n                           />\n                        </LocalizationProvider>\n                     </div>\n                     <div>\n                        <FormLabel className=\"label\" id=\"demo-controlled-radio-buttons-group\">Payment ID<span className=\"text-danger\">*</span></FormLabel>\n                        <TextField\n                           name=\"paymentId\"\n                           fullWidth\n                           variant=\"outlined\"\n                           size=\"small\"\n                           inputProps={{ maxLength: 100 }}\n                           value={paymentId}\n                           onChange={(e) =>\n                              handleOnlinePaymentDetailsChange(\"paymentId\", e.target.value)\n                           }\n                        />\n                     </div>\n                  </div>\n               </>\n            )}\n            {/* Cash Receipt */}\n            {investmentData.modeOfPayment === \"Cash\" && (\n               <div>\n                  <FormLabel className=\"label\" id=\"demo-controlled-radio-buttons-group\">Cash Receipt<span className=\"text-danger\">*</span></FormLabel>\n                  <span className=\"input-file\" >\n                     <FileBase64\n                        name=\"cashReceipt\"\n                        type=\"file\"\n                        sx={{ display: 'none' }}\n                        multiple={false}\n                        onDone={({ base64 }) => { handlecashReceiptImg(base64) }}\n                     />\n                  </span>\n               </div>\n            )}\n            {/* Cheque Details */}\n            {investmentData.modeOfPayment === \"Cheque\" && (\n               <>\n                  <FormLabel className=\"label\">Cheque Details</FormLabel>\n                  <div>\n                     <FormLabel className=\"sub-label\">Bank</FormLabel>\n                     <TextField\n                        fullWidth\n                        variant=\"outlined\"\n                        size=\"small\"\n                        inputProps={{ maxLength: 250 }}\n                        value={chequebank}\n                        onChange={(e) =>\n                           handleChequeDetailsChange(\"chequebank\", e.target.value)\n                        }\n                     />\n                  </div>\n                  <div className=\"grid grid-2\">\n                     <div sx={{ padding: '20px' }}>\n\n                        <FormLabel className=\"label\" id=\"demo-controlled-radio-buttons-group\">Payment Date <span className=\"text-danger\">*</span></FormLabel>\n                        {/* DatePicker or similar component */}\n                        <LocalizationProvider dateAdapter={AdapterDayjs}>\n                           <Date\n                              name='chequepaymentDate'\n                              renderInput={(params) => <TextField {...params} size=\"small\" />}\n                              value={chequepaymentDate}\n                              onChange={(date) => handleChequeDetailsChange(\"chequepaymentDate\", date)}\n                           />\n                        </LocalizationProvider>\n                     </div>\n                     <div>\n                        <FormLabel className=\"label\" id=\"demo-controlled-radio-buttons-group\">Cheque Number<span className=\"text-danger\">*</span></FormLabel>\n                        <TextField\n                           fullWidth\n                           variant=\"outlined\"\n                           size=\"small\"\n                           inputProps={{ maxLength: 100 }}\n                           name=\"chequeNumber\"\n                           value={chequeNumber}\n                           onChange={(e) =>\n                              handleChequeDetailsChange(\"chequeNumber\", e.target.value)\n                           }\n                        />\n                     </div>\n                  </div>\n               </>\n\n            )}\n            <FormHelperText error>{errors.modeOfPayment.errorMessage}</FormHelperText>\n            <div>\n               <FormLabel className=\"label\" id=\"demo-controlled-radio-buttons-group\">Investment Document<span className=\"text-danger\">*</span></FormLabel>\n               <span className=\"input-file\" >\n                  <FileBase64\n                     name=\"investmentDocuments\"\n                     type=\"file\"\n                     sx={{ display: 'none' }}\n                     multiple={true}\n                     onDone={(images) => handleInvestmentDocuments(images)}\n                     value={investmentDocuments}\n                  />\n                  <FormHelperText error>{errors.investmentDocuments.errorMessage}</FormHelperText>\n               </span>\n            </div>\n            <div className=\"grid grid-2\">\n               <div sx={{ padding: '20px' }}>\n\n                  <FormControl className='FilterFormControl' sx={{ minWidth: '250px' }} size=\"small\">\n                     <InputLabel id=\"demo-simple-select-label\">Investment Qualify</InputLabel>\n                     <Select\n                        labelId=\"demo-simple-select-label\"\n                        id=\"demo-simple-select\"\n                        open={openQualifyMenu}\n                        name=\"investmentQualify\"\n                        value={investmentQualify}\n                        onClose={() => { setOpenQualifyMenu(false) }}\n                        onOpen={() => { setOpenQualifyMenu(true) }}\n                        label=\"Filter\"\n                        onChange={onValueChange}>\n\n                        {QualifyArray && QualifyArray.map((qualify, index) => (\n                           <MenuItem value={qualify.toLowerCase()} key={qualify + index} >\n                              {qualify}\n                           </MenuItem>))\n                        }\n\n                     </Select>\n                  </FormControl>\n                  <FormHelperText error>{errors.investmentQualify.errorMessage}</FormHelperText>\n               </div>\n               <div >\n                  <FormControl className='FilterFormControl' sx={{ minWidth: '250px' }} size=\"small\">\n                     <InputLabel id=\"demo-simple-select-label\">Investment Category</InputLabel>\n                     <Select\n                        labelId=\"demo-simple-select-label\"\n                        id=\"demo-simple-select\"\n                        open={openCatMenu}\n                        name=\"investmentCategory\"\n                        value={investmentCategory}\n                        onClose={() => { setOpenCatMenu(false) }}\n                        onOpen={() => { setOpenCatMenu(true) }}\n                        label=\"Filter\"\n                        onChange={onValueChange}>\n\n                        {CategoryArray && CategoryArray.map((cat, index) => (\n                           <MenuItem value={cat} key={cat + index} >\n                              {cat}\n                           </MenuItem>))\n                        }\n                     </Select>\n                  </FormControl>\n                  <FormHelperText error>{errors.investmentCategory.errorMessage}</FormHelperText>\n               </div>\n            </div>\n            <div>\n               <FormLabel className=\"label\" id=\"demo-controlled-radio-buttons-group\">Investment Description<span className=\"text-danger\">*</span></FormLabel>\n               <TextField\n                  multiline rows={5}\n                  fullWidth\n                  type={'text'} onChange={(e) => onValueChange(e)}\n                  name='description'\n                  value={description}\n                  size=\"small\"\n                  inputProps={{ maxLength: 1000 }}\n               ></TextField>\n            </div>\n            <div>\n               <FormLabel className=\"label\" id=\"demo-controlled-radio-buttons-group\">Point Of Contact<span className=\"text-danger\">*</span></FormLabel>\n               <div className=\"grid grid-2\">\n                  <div sx={{ padding: '20px' }}>\n                     <FormLabel className=\"label\" id=\"demo-controlled-radio-buttons-group\">Name<span className=\"text-danger\">*</span></FormLabel>\n                     <TextField variant='outlined' fullWidth\n                        type={'text'} onChange={(e) => handleContactPersonDetailsChange(\"personName\", e.target.value)}\n                        error={(errors.contactPerson.personName.error)}\n                        helperText={(errors.contactPerson.personName.error && errors.contactPerson.personName.errorMessage)}\n                        name='personName' value={personName}\n                        size=\"small\"\n                        inputProps={{ maxLength: 250 }}\n                     ></TextField>\n                  </div>\n                  <div>\n                     <FormLabel className=\"label\" id=\"demo-controlled-radio-buttons-group\">Contact Number<span className=\"text-danger\">*</span></FormLabel>\n                     <TextField variant='outlined' fullWidth\n                        type={'text'} onChange={(e) => handleContactPersonDetailsChange(\"contactNumber\", e.target.value)}\n                        error={(errors.contactPerson.contactNumber.error)}\n                        helperText={\n                           (errors.contactPerson.contactNumber.error &&\n                              errors.contactPerson.contactNumber.errorMessage) ||\n                           (investmentData.contactPerson.contactNumber.length !== 10 &&\n                              investmentData.contactPerson.contactNumber.length > 0 &&\n                              \"Contact number should be exactly 10 digits\")\n                        }\n                        name='contacNumber' value={contactNumber}\n                        size=\"small\"\n                     ></TextField>\n                  </div>\n                  <FormHelperText error>{errors.contactPerson.errorMessage}</FormHelperText>\n               </div>\n            </div>\n            <div className=\"grid grid-2 mt-4\">\n               <button className=\"btn btn-secondary btn-danger\" onClick={() => clear()}>\n                  Reset\n               </button>\n               <button className=\"btn btn-primary\" disabled={loadingRef.current} onClick={() => validateInvestmentDetails()}>\n                  {loadingRef.current ? 'Updating...' : 'Edit Investment'}\n                  {loadingRef.current && <FontAwesomeIcon icon=\"spinner\" spin />}\n               </button>\n            </div>\n         </div>\n      </Container>\n   );\n};\n\nexport default EditInvestment;\n","import { Button, Dialog, DialogContent, DialogTitle, Typography } from \"@mui/material\";\nimport CloseIcon from '@mui/icons-material/Close';\n\nimport ItemForm from \"../Items/ItemForm\";\nimport EditItem from \"../Items/EditItem\";\n\nimport InvestmentForm from \"../investments/InvestmentForm\";\nimport EditInvestment from \"../investments/EditInvestment\";\n\n\nexport default function Popup(props) {\n\n   const { setRender, showModal, setShowModal, formType } = props;\n   const { openDialog, currItem } = showModal;\n\n   const handleClose = () => {\n      setShowModal({ ...showModal, openDialog: false });\n   };\n\n   return (\n      <Dialog open={openDialog} onClose={handleClose} maxWidth='md'>\n         <DialogTitle>\n            <div style={{ display: 'flex' }}>\n               <Typography variant=\"h6\" component=\"div\" style={{ flexGrow: 1 }}>\n                  \n                  {formType} Details\n               </Typography>\n               <Button\n                  color=\"secondary\"\n                  onClick={() => setShowModal({ ...showModal, openDialog: false })}>\n                  <CloseIcon />\n               </Button>\n            </div>\n         </DialogTitle>\n         <DialogContent dividers sx={{ paddingY: 2, paddingX: 0 }}>\n            \n            { \n               formType === 'Investment'? <InvestmentForm setRender={setRender} showModal={showModal} setShowModal={setShowModal} />  :\n               \n               formType === \"Edit Investment\" ? <EditInvestment setRender={setRender} showModal={showModal} setShowModal={setShowModal} />  :\n               \n               formType === 'Add' ? <ItemForm setRender={setRender} showModal={showModal} setShowModal={setShowModal} /> : \n               \n               <EditItem setRender={setRender} cItem={currItem} showModal={showModal} setShowModal={setShowModal} /> \n            }\n         </DialogContent>\n      </Dialog>\n   );\n}"],"names":["Date","styled","DatePicker","_templateObject","_taggedTemplateLiteral","props","user","JSON","parse","localStorage","getItem","_useState","useState","title","amount","category","paymentType","dateOfInvoice","dateOfPayment","description","paymentProof","userId","id","_useState2","_slicedToArray","itemData","setItemData","setRender","showModal","setShowModal","loadingRef","useRef","Cookie","set","path","_useState3","value","error","errorMessage","_useState4","errors","setErrors","addItemDetails","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_context","prev","next","createItem","_objectSpread","openDialog","toast","position","autoClose","hideProgressBar","closeOnClick","theme","stop","apply","arguments","onValueChange","e","_defineProperty","target","name","_jsx","Container","children","_jsxs","className","FormLabel","TextField","variant","fullWidth","type","onChange","helperText","size","match","RadioGroup","row","FormControlLabel","control","Radio","required","label","FormHelperText","sx","padding","LocalizationProvider","dateAdapter","AdapterDayjs","renderInput","params","date","setDateOfInvoice","setDateOfPayment","multiline","rows","FileBase64","display","multiple","onDone","_ref2","img","fileExtension","split","includes","alert","length","console","log","handleImageData","base64","onClick","disabled","current","errorFields","Object","keys","newErrorValues","values","countErrors","index","currentField","currentValue","setTimeout","validateItemDetails","FontAwesomeIcon","icon","spin","QualifyArray","CategoryArray","investmentName","investmentAmount","investmentVendor","investmentDate","investmentDuration","dateOfMature","modeOfPayment","onlinePaymentDetails","onlinebank","onlinepaymentDate","paymentId","cashReceipt","chequeDetails","chequebank","chequeNumber","chequepaymentDate","investmentDocuments","investmentQualify","investmentCategory","contactPerson","personName","contactNumber","investmentData","setInvestmentData","_investmentData$onlin","_investmentData$chequ","_investmentData$conta","openQualifyMenu","setOpenQualifyMenu","_useState5","_useState6","openCatMenu","setOpenCatMenu","Cookies","_useState7","_useState8","addInvestmentDetails","createInvestment","handlecashReceiptImg","handleOnlinePaymentDetailsChange","field","handleChequeDetailsChange","handleContactPersonDetailsChange","replace","slice","inputProps","maxLength","setInvestmentDate","setDateOfMature","_Fragment","images","maxSize","isValidSize","forEach","image","file","allowedFileExtensions","isValidExtensions","map","handleInvestmentDocuments","FormControl","minWidth","InputLabel","Select","labelId","open","onClose","onOpen","qualify","MenuItem","toLowerCase","cat","some","validateInvestmentDetails","Investment","currInvestment","_id","useEffect","loadItemDetails","response","getInvestment","sent","data","editInvestmentDetails","_callee2","_context2","updateInvestment","_ref3","Popup","formType","currItem","Dialog","maxWidth","DialogTitle","style","Typography","component","flexGrow","Button","color","CloseIcon","DialogContent","dividers","paddingY","paddingX","InvestmentForm","EditInvestment","ItemForm","EditItem","cItem"],"sourceRoot":""}